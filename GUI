package SlidingGame;
import java.awt.*;
import java.awt.event.*;
import javax.swing.*;
import javax.swing.event.*;

public class SlidePuzzleGUI extends JPanel {
	private GraphicsPanel _puzzleGraphics;
	private SlidePuzzleModel _puzzleModel = new SlidePuzzleModel();

	
	public SlidePuzzleGUI(){
		JButton newGameButton = new JButton("New Game");
		newGameButton.addActionListener(new NewGameAction());
		
		
		JPanel controlPanel= new JPanel();
		controlPanel.setLayout(new FlowLayout());
		controlPanel.add(newGameButton);
		
		
		_puzzleGraphics = new GraphicsPanel();
		
		
		this.setLayout(new BorderLayout());
		this.add(controlPanel, BorderLayout.NORTH);
		this.add(_puzzleGraphics, BorderLayout.CENTER);
	}
	
	
class GraphicsPanel extends JPanel implements MouseListener {
	private static final int ROWS = 5;
	private static final int COLS = 5;
	
	private static final int CELL_SIZE = 100; 
	private Font _biggerFont;
	
	
	public GraphicsPanel(){
		_biggerFont = new Font("SansSerif", Font.BOLD, CELL_SIZE/2);
		this.setPreferredSize(
				new Dimension(CELL_SIZE * COLS, CELL_SIZE*ROWS));
		this.setBackground(Color.blue);
		this.addMouseListener(this);
	}
	
	
	public void paintComponent(Graphics g){
		super.paintComponent(g);
		for(int r=0; r<ROWS; r++){
			for(int c=0; c<COLS; c++){
				int x = c*CELL_SIZE;
				int y = r*CELL_SIZE;
				String text = _puzzleModel.getFace(r,c);
				if (text != null){
					g.setColor(Color.white);
					g.fillRect(x+2, y+2, CELL_SIZE-4,CELL_SIZE-4);
					g.setColor(Color.blue);
					g.setFont(_biggerFont);
					g.drawString(text, x+20, y+(3*CELL_SIZE/4));
				}
			}
		}
	}
	public void mousePressed(MouseEvent e){
		
		int col = e.getX()/CELL_SIZE;
		int row = e.getY()/CELL_SIZE;
		
		if(!_puzzleModel.moveTile(row, col)){
			
			Toolkit.getDefaultToolkit().beep();
		}
		
		this.repaint();
	}
	
	
	
	public void mouseClicked (MouseEvent e){}
	public void mouseReleased(MouseEvent e){}
	public void mouseEntered (MouseEvent e){}
	public void mouseExited (MouseEvent e){}	
}


public class NewGameAction implements ActionListener {
	public void actionPerformed(ActionEvent e){
		_puzzleModel.reset();
		_puzzleGraphics.repaint();
		}
	}
}
